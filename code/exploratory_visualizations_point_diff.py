# -*- coding: utf-8 -*-
"""exploratory_visualizations_point_diff.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LJBltJEq9bhMDfucvmOqHnpepDFnelWp
"""

import pandas as pd
import geopy.distance
url = 'https://raw.githubusercontent.com/anath703/DS_5100_PROJECT/main/cleanedNflFullGameLog.csv' #location of raw data file
df = pd.read_csv(url)

df = df[(df['Season']>1999)]
stadium = pd.read_csv('https://raw.githubusercontent.com/anath703/DS_5100_PROJECT/main/stadium_coordinates.csv')
stadium_dict = stadium.set_index('team').T.to_dict('list')

#assigning a list of the stadium info to each team based off of team name
df['Home_Stadium_List']= df['Home_Team'].map(stadium_dict)
df['Away_Stadium_List']= df['Away_Team'].map(stadium_dict)

#breaking the list of each team's stadium info into its own column
df[['Home_Latitude','Home_Longitude', 'Home_Stad_Type', 'Home_Altitude']] = pd.DataFrame(df.Home_Stadium_List.tolist(), index= df.index)
df[['Away_Latitude','Away_Longitude', 'Away_Stad_Type', 'Away_Altitude']] = pd.DataFrame(df.Away_Stadium_List.tolist(), index= df.index)

#creating latitude and longitude tuples for distance calculation
df['Home_Tupe'] = list(zip(df.Home_Latitude, df.Home_Longitude))
df['Away_Tupe'] = list(zip(df.Away_Latitude, df.Away_Longitude))

#create a function to calculate the distance in miles between the stadiums
def distance_calc(row):
    coords_1 = (row['Home_Latitude'], row['Home_Longitude'])
    coords_2 = (row['Away_Latitude'], row['Away_Longitude'])
    return geopy.distance.distance(coords_1, coords_2).miles

#apply the function to our dataframe
df['distance'] = df.apply(distance_calc, axis=1)

#remove stadium info lists since they're redundant
df.drop(['Home_Stadium_List','Away_Stadium_List'], inplace=True, axis=1)

"""Create the segments of the stadiums analyzed into four groups"""

first5 = df[(df['Season'] <= 2004 ) & (df['Season'] >= 2000)]

second5 = df[(df['Season'] <= 2009 ) & (df['Season'] >= 2005)]

third5 = df[(df['Season'] <= 2014 ) & (df['Season'] >= 2010)]

final5 = df[(df['Season'] >= 2015)]

# Create a new column that calculates the point differential for Away Teams
first5['Points_Diff_Away'] = first5['Points_Away'] - first5['Points_Home']
points_cols = ['Points_Diff']
points_cols_away= ['Points_Diff_Away']
point_group = first5[points_cols].groupby(first5['Home_Team']).mean()
# Create a new column that's just the index of the df
point_group['Team'] = point_group.index
point_group_away = first5[points_cols_away].groupby(first5['Away_Team']).mean()
# Create a new column that's just the index of the df for the away teams
point_group_away['Team'] = point_group_away.index

# Merge the two groupby df(s)
merged_point_group = pd.merge(point_group, point_group_away)
# Rearrange the columns
merged_point_group = merged_point_group[["Team", "Points_Diff", "Points_Diff_Away"]]
# Calculate the difference in point differential at home vs. point differential away
merged_point_group['Diff_Home_Away'] = merged_point_group['Points_Diff'] - merged_point_group['Points_Diff_Away']
merged_point_group

# Plot a sorted bar plot for the difference in point differential at home vs. point differential away for each team
sns.barplot(x='Team', y="Diff_Home_Away",
            data=merged_point_group,
            palette="Purples",
            order=merged_point_group.sort_values('Diff_Home_Away').Team).set_title('Difference between Average Point Differential at Home and Away for the Seasons 2000 - 2004')
plt.xticks(rotation=90)
plt.tight_layout()
sns.set(rc = {'figure.figsize':(15,10)})

"""Do the same calculations for the rest of the season groupings"""

second5['Points_Diff_Away'] = second5['Points_Away'] - second5['Points_Home']
point_group_2nd = second5[points_cols].groupby(second5['Home_Team']).mean()
point_group_2nd['Team'] = point_group_2nd.index
point_group_away_2nd = second5[points_cols_away].groupby(second5['Away_Team']).mean()
point_group_away_2nd['Team'] = point_group_away_2nd.index

merged_point_group_2nd = pd.merge(point_group_2nd, point_group_away_2nd)
merged_point_group_2nd = merged_point_group_2nd[["Team", "Points_Diff", "Points_Diff_Away"]]
merged_point_group_2nd['Diff_Home_Away'] = merged_point_group_2nd['Points_Diff'] - merged_point_group_2nd['Points_Diff_Away']
merged_point_group_2nd
sns.barplot(x='Team', y="Diff_Home_Away",
            data=merged_point_group_2nd,
            palette="Greens",
            order=merged_point_group_2nd.sort_values('Diff_Home_Away').Team).set_title('Difference between Average Point Differential at Home and Away for the Seasons 2005 - 2009')
plt.xticks(rotation=90)
plt.tight_layout()
sns.set(rc = {'figure.figsize':(15,10)})

third5['Points_Diff_Away'] = third5['Points_Away'] - third5['Points_Home']
point_group_3rd = third5[points_cols].groupby(third5['Home_Team']).mean()
point_group_3rd['Team'] = point_group_3rd.index
point_group_away_3rd = third5[points_cols_away].groupby(third5['Away_Team']).mean()
point_group_away_3rd['Team'] = point_group_away_3rd.index

merged_point_group_3rd = pd.merge(point_group_3rd, point_group_away_3rd)
merged_point_group_3rd = merged_point_group_3rd[["Team", "Points_Diff", "Points_Diff_Away"]]
merged_point_group_3rd['Diff_Home_Away'] = merged_point_group_3rd['Points_Diff'] - merged_point_group_3rd['Points_Diff_Away']
merged_point_group_3rd
sns.barplot(x='Team', y="Diff_Home_Away",
            data=merged_point_group_3rd,
            palette="Reds",
            order=merged_point_group_3rd.sort_values('Diff_Home_Away').Team).set_title('Difference between Average Point Differential at Home and Away for the Seasons 2010 - 2014')
plt.xticks(rotation=90)
plt.tight_layout()
sns.set(rc = {'figure.figsize':(15,10)})

# Since the final season grouping is when there were name changes/city changes, merge them all into the current name so that two bars/groups aren't created for one franchise
final5.Home_Team[final5.Home_Team == "Washington Redskins"] = "Washington Football Team"
final5.Away_Team[final5.Away_Team == "Washington Redskins"] = "Washington Football Team"
final5.Home_Team[final5.Home_Team == "St. Louis Rams"] = "Los Angeles Rams"
final5.Away_Team[final5.Away_Team == "St. Louis Rams"] = "Los Angeles Rams"
final5.Home_Team[final5.Home_Team == "Oakland Raiders"] = "Las Vegas Raiders"
final5.Away_Team[final5.Away_Team == "Oakland Raiders"] = "Las Vegas Raiders"
final5.Home_Team[final5.Home_Team == "San Diego Chargers"] = "Los Angeles Chargers"
final5.Away_Team[final5.Away_Team == "San Diego Chargers"] = "Los Angeles Chargers"

final5['Points_Diff_Away'] = final5['Points_Away'] - final5['Points_Home']
point_group_4th = final5[points_cols].groupby(final5['Home_Team']).mean()
point_group_4th['Team'] = point_group_4th.index
point_group_away_4th = final5[points_cols_away].groupby(final5['Away_Team']).mean()
point_group_away_4th['Team'] = point_group_away_4th.index

merged_point_group_4th = pd.merge(point_group_4th, point_group_away_4th)
merged_point_group_4th = merged_point_group_4th[["Team", "Points_Diff", "Points_Diff_Away"]]
merged_point_group_4th['Diff_Home_Away'] = merged_point_group_4th['Points_Diff'] - merged_point_group_4th['Points_Diff_Away']
merged_point_group_4th
sns.barplot(x='Team', y="Diff_Home_Away",
            data=merged_point_group_4th,
            palette="Blues",
            order=merged_point_group_4th.sort_values('Diff_Home_Away').Team).set_title('Difference between Average Point Differential at Home and Away for the Seasons 2015 - 2020')
plt.xticks(rotation=90)
plt.tight_layout()
sns.set(rc = {'figure.figsize':(15,10)})

"""Create box plots to see the distribution of difference in point differential"""

sns.boxplot(y=merged_point_group_4th["Diff_Home_Away"], palette='Blues').set(ylim=(-2, 14),title='Difference between Average Point Differential at Home and Away for the Seasons 2015 - 2020')
sns.swarmplot(y=merged_point_group_4th["Diff_Home_Away"], color=".25").set(ylim=(-2, 14),title='Difference between Average Point Differential at Home and Away for the Seasons 2015 - 2020')

sns.boxplot(y=merged_point_group_3rd["Diff_Home_Away"], palette='Reds').set(ylim=(-2, 14),title='Difference between Average Point Differential at Home and Away for the Seasons 2010 - 2014')
sns.swarmplot(y=merged_point_group_3rd["Diff_Home_Away"], color=".25").set(ylim=(-2, 14),title='Difference between Average Point Differential at Home and Away for the Seasons 2010 - 2014')

sns.boxplot(y=merged_point_group_2nd["Diff_Home_Away"], palette='Greens').set(ylim=(-2, 14),title='Difference between Average Point Differential at Home and Away for the Seasons 2005 - 2009')
sns.swarmplot(y=merged_point_group_2nd["Diff_Home_Away"], color=".25").set(ylim=(-2, 14),title='Difference between Average Point Differential at Home and Away for the Seasons 2005 - 2009')

sns.boxplot(y=merged_point_group["Diff_Home_Away"], palette='Purples').set(ylim=(-2, 14), title='Difference between Average Point Differential at Home and Away for the Seasons 2000 - 2004')
sns.swarmplot(y=merged_point_group["Diff_Home_Away"], color=".25").set(ylim=(-2, 14), title='Difference between Average Point Differential at Home and Away for the Seasons 2000 - 2004')

# Create a column in each season grouping with the same name so they can be merged into one df
merged_point_group = merged_point_group.assign(Seasons="2000-2004")
merged_point_group_2nd = merged_point_group_2nd.assign(Seasons="2005-2009")
merged_point_group_3rd = merged_point_group_3rd.assign(Seasons="2010-2014")
merged_point_group_4th = merged_point_group_4th.assign(Seasons="2015-2020")

cdf = pd.concat([merged_point_group, merged_point_group_2nd, merged_point_group_3rd, merged_point_group_4th])
cdf  

# Create a box plot with 4 different boxes for each grouping of seasons 
sns.boxplot(x="Seasons", y="Diff_Home_Away", data=cdf)
sns.stripplot(x = "Seasons",
              y = "Diff_Home_Away",
              color = 'black',
              data = cdf).set_title("Distribution of Difference between Average Point Differential at Home and Away")    
plt.show()
